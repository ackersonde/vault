name: Deploy vault in Hetzner

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Deploy to Hetzner
        run: |
          export HETZNER_API_TOKEN=$(echo ${{ secrets.ORG_HETZNER_CLOUD_API_TOKEN }} | base64 -d)
          export HETZNER_VAULT_VOLUME_ID=$(echo ${{ secrets.ORG_HETZNER_VAULT_VOLUME_ID }} | base64 -d)

          git clone https://github.com/ackersonde/hetzner_home.git
          cd hetzner_home
          go mod tidy
          go build hetzner.go
          cd ../

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          ./hetzner_home/hetzner -fn=firewallSSH -tag=vault -ip=$public_ip_address

          mkdir ~/.ssh
          echo -n "${{ secrets.ORG_SERVER_DEPLOY_SECRET }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 400 ~/.ssh/id_ed25519

          HZ_VOL_MOUNT=/dev/disk/by-id/scsi-0HC_Volume_$HETZNER_VAULT_VOLUME_ID
          mount_cmd="$(cat <<-EOF
            if ! mountpoint /mnt/hetzner_disk ; then
              mount -o discard,defaults $HZ_VOL_MOUNT /mnt/hetzner_disk
              mkdir -p /mnt/hetzner_disk/vault_data/config
              chown -Rf systemd-network:1000 /mnt/hetzner_disk/vault_data
              echo $hz_vol_mount /mnt/hetzner_disk ext4 defaults,nofail,discard 0 0 | sudo tee -a /etc/fstab
            fi
          EOF
          )"
          init_cmd="$(cat <<-EOF
            sleep 3
            if [ ! -d "/mnt/hetzner_disk/vault_data/core" ] ; then
              docker exec -d vault /vault/config/init-vault.sh
            else # if attaching to existing, correct folder permissions and restart
              docker exec -d vault chown -Rf vault:vault /vault
              sleep 3
              docker restart vault
            fi
          EOF
          )"

          ssh -o StrictHostKeyChecking=no root@vault.ackerson.de "$mount_cmd"
          scp local.json init-vault.sh root@vault.ackerson.de:/mnt/hetzner_disk/vault_data/config/
          ssh root@vault.ackerson.de "\
            docker rm -f vault || true && docker pull vault:latest && \
            docker run -d --cap-add=IPC_LOCK --restart=always --pull=always \
              -v /mnt/hetzner_disk/vault_data:/vault \
              -e VAULT_API_ADDR=http://127.0.0.1:8200 \
              -e VAULT_ADDR=http://127.0.0.1:8200 \
              --label='traefik.enable=true' \
              --label='traefik.http.routers.vault.middlewares=http-ratelimit@file,secHeaders@file' \
              --label='traefik.http.routers.vault.tls.domains=vault.ackerson.de' \
              --label='traefik.http.routers.vault.rule=Host(\`vault.ackerson.de\`)' \
              --name vault vault:latest server && \
            $init_cmd"

          rm -Rf ~/.ssh
          ./hetzner_home/hetzner -fn=cleanupDeploy -tag=vault

          export SLACK_NOTIFY_TOKEN=$(echo ${{ secrets.ORG_SLACK_NOTIFICATIONS_TOKEN }} | base64 -d)
          curl -s -o /dev/null -X POST -d token=$SLACK_NOTIFY_TOKEN -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
